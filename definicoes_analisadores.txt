Definições dos Analisadores

- Analisador Léxico

    Analisador léxico, também conhecido como **lexer** ou **scanner**. Ele é usado para 
dividir um código-fonte em uma lista de tokens, que são as unidades básicas de significado no código.

    Estrutura da classe:

1. `token_patterns`: Esta é uma lista de tuplas, onde cada tupla contém uma expressão regular 
e um rótulo de token correspondente. As expressões regulares são usadas para reconhecer diferentes tipos 
de tokens no código-fonte.

2. `lex_analyser(code)`: Esta é a função principal que realiza a análise léxica. Ela recebe uma 
string de código-fonte como entrada.

3. `while position < len(code):`: Este é o loop principal que percorre cada caractere do código-fonte.

4. `for token_pattern in token_patterns:`: Para cada caractere, ele verifica cada padrão de 
token para ver se há uma correspondência.

5. `regex = re.compile(pattern)`: Compila a expressão regular do padrão de token.

6. `match = regex.match(code, position)`: Verifica se a expressão regular corresponde ao código 
a partir da posição atual.

7. `if match:`: Se houver uma correspondência, ele cria um token com o texto correspondente, 
o rótulo do token e a posição atual no código (linha e coluna).

8. `tokens.append(token)`: Adiciona o token à lista de tokens.

9. `if not match:`: Se não houver uma correspondência, ele levanta um erro de sintaxe.

10. `newlines = text.count('\n')`: Conta o número de novas linhas no texto correspondente.

11. `line += newlines`: Atualiza o número da linha.

12. `column = len(text) - text.rfind('\n')`: Atualiza o número da coluna.

13. `position = match.end(0)`: Atualiza a posição para o final da correspondência.

14. `return tokens`: Retorna a lista de tokens.

    Em resumo, este código é usado para analisar um código-fonte e dividir-lo em uma lista de 
tokens, que pode ser usada para análise sintática posterior. Cada token contém o texto 
correspondente, o rótulo do token e a posição no código-fonte. Se ele encontra um caractere 
que não corresponde a nenhum padrão de token, ele levanta um erro de sintaxe.

- Analisador sintático

    O código começa com a 'parse_table' que é a gramática usada para reconhecimento das listas
de tokens avaliadas posteriormente. Em seguido temos a função 'syn_analyser' onde ocorre toda a
analise dos tokens recebidos pela classe main e comparado com a gramática. 

    Estrutura da função 'syn_analyser':

1. `stack = ['MAIN', '$']`: Inicializa uma pilha com os tokens 'MAIN' e '$'.

2. `tokens.append('$')`: Adiciona o token '$' ao final da lista de tokens.

3. `while stack:`: Entra em um loop enquanto a pilha não estiver vazia.

4. `top = stack.pop()`: Remove e retorna o último elemento da pilha.

5. `current_token = tokens[index]`: Obtém o token atual da lista de tokens.

6. `if top in parse_table:`: Verifica se o token do topo da pilha está na tabela de análise sintática.

7. `if current_token in parse_table[top]:`: Se o token do topo da pilha estiver na tabela de análise sintática, 
verifica se o token atual está na entrada correspondente da tabela de análise sintática.

8. `production = parse_table[top][current_token]`: Obtém a produção da tabela de análise sintática para o token 
do topo da pilha e o token atual.

9. `stack.extend(reversed(production))`: Se a produção existir, adiciona os tokens da produção ao topo da pilha 
na ordem inversa.

10. `if top == current_token:`: Se o token do topo da pilha for igual ao token atual, incrementa o índice.

11. `if index == len(tokens) - 1:`: Se o índice for igual ao número de tokens menos um, retorna True.

12. `else:`: Se o índice não for igual ao número de tokens menos um, imprime uma mensagem de erro e retorna False.

    Essencialmente, esta função implementa um analisador sintático descendente LL(1) que usa uma pilha e uma tabela 
de análise sintática para determinar se uma lista de tokens pode ser analisada em uma gramática específica. Ela retorna 
True se a análise for bem-sucedida e False caso contrário. Além disso, ela imprime mensagens de erro quando encontra 
tokens inesperados ou ausentes. 
